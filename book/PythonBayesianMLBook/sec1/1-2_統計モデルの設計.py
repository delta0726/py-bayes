# ******************************************************************************
# Course  : Python出始めるベイズ機械学習入門
# Chapter : 1 ベイジアンモデリングとは
# Theme   : 統計モデルの設計
# Date    : 2022/07/19
# Page    : P27 - P33
# URL     : https://github.com/sammy-suyama/PythonBayesianMLBook
# ******************************************************************************


# ＜概要＞
# - 機械学習は複雑なデータに対して予測/パターン認識を行うため、単純な確率分布を単体で使用することは少ない
# - 確率分布を組み合わせて複雑な分布を設計、変数変換を組み合わせてモデリングする（統計モデリング）


# ＜目次＞
# 0 準備
# 1 混合モデル
# 2 回帰モデル
# 3 グラフィカルモデル


# 0 準備 ---------------------------------------------------------------------

# ライブラリ
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats


# 1 混合モデル ----------------------------------------------------------------

# ＜ポイント＞
# - 混合モデルは｢クラスタリング｣や｢分類問題｣で用いられる
#   --- 以下では簡単な例として｢ベルヌーイ分布｣と｢ガウス分布｣を組み合わせて混合分布を作成する
#   --- 解析的にモデル化できる場合は理論分布を作成することも可能


# パラメータの設定
mu = 0.3

# インスタンス生成
# --- 正規乱数
d1 = stats.norm(1.0, 0.5)
d2 = stats.norm(-1.0, 1.0)

# 変数の初期化
N = 10000
Z = np.zeros(N)
X = np.zeros(N)

# シミュレーション
# --- ベルヌーイ乱数が1/0の場合で異なる正規乱数を発生させる
# --- N個の要素を持つ配列が生成される
i = 1
for i in range(N):
    Z[i] = stats.bernoulli(mu).rvs()
    if Z[i] == 0:
        X[i] = d1.rvs()
    else:
        X[i] = d2.rvs()

# プロット作成
plt.hist(X, bins=10)
plt.show()


# モデル定義
# --- 混合モデル(ベルヌーイ分布 * ガウス分布)
# --- 導出過程は割愛
def mixture_pdf(mu, d1, d2, x):
    return (1.0 - mu) * d1.pdf(x) + mu * d2.pdf(x)


# 理論分布
# --- 確率密度関数を描画する
ls = np.linspace(-3, 3, 100)
plt.plot(ls, mixture_pdf(mu, d1, d2, ls))
plt.show()


# 2 回帰モデル ----------------------------------------------------------------

# ＜ポイント＞
# - ｢回帰モデル｣とはベイジアンモデリングでは関数を生成する統計モデルのことを指す
# - 回帰モデルにおける分布の指定は｢制約条件｣として機能する
# - 対数変換など関数定義を修正することで多様性を持たせることが可能となる（一般化線形モデル）


# パラメータ設定
N = 10

# 等差数列の生成
ls = np.linspace(-3, 3, 100)


# シミュレーション
# --- 切片と傾きを乱数生成してプロット生成
plt.figure()
for i in range(N):
    a = stats.norm(0, 1).rvs()
    b = stats.norm(0, 1).rvs()
    plt.plot(ls, a * ls + b)
plt.show()

# シミュレーション
# --- 傾きをガンマ分布に変更（正の値しか取らない）
plt.figure()
for i in range(N):
    a = stats.gamma(1, 1).rvs()
    b = stats.norm(0, 1).rvs()
    plt.plot(ls, a * ls + b)
plt.show()

# シミュレーション
# --- 関数を指数変換（変換により関数の性質を変えることができる）
plt.figure()
for i in range(N):
    a = stats.norm(0, 1).rvs()
    b = stats.norm(0, 1).rvs()
    plt.plot(ls, np.exp(a * ls + b))
plt.show()


# 3 グラフィカルモデル ---------------------------------------------------------

# ＜ポイント＞
# - 統計モデルはグラフィカルモデルとして、変数間の関係性を視覚的に表すことができる
#   --- モデル構築段階でどのデータを使い、パラメータやデータ間の依存関係を仮定していく
#   --- 有向グラフ(DAG)を用いる
